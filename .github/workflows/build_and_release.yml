name: Build and release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  LIBDDWAF_VERSION: 1.0.7

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - run: npm ci
      - run: npm run lint

  licenses:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - run: npm run licenses

  build-native:
    strategy:
      matrix:
        target:
          - name: macos
            os: macos-latest
            artifact: darwin-x64-unknown
            arch: x64
          - name: windows 64 bits # - TODO: windows support when we have a static lib
            os: windows-2016
            artifact: win32-x64-unknown
            arch: x64
          - name: windows 32 bits # - TODO: windows support when we have a static lib
            os: windows-2016
            artifact: win32-x32-unknown
            arch: x32
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          architecture: ${{ matrix.target.arch }}
      - run: npm ci --ignore-scripts
      - run: node scripts/setup.js
      - run: npm run build-test-bundle
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.artifact }}
          path: ${{ matrix.target.artifact }}.tgz

  build-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - dockerfile: Dockerfile
            libc: glibc
            artifact: linux-x64-glibc
          - dockerfile: alpine.Dockerfile
            libc: musl
            artifact: linux-x64-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm ci --ignore-scripts # TODO: understand why it builds per default
      - run: node scripts/setup.js
        env:
          PLATFORM: 'linux'
          LIBC: ${{ matrix.target.libc }}
      - run: docker build -t build -f ./docker/${{ matrix.target.dockerfile }} .
      - run: docker run --name builder build
      - run: docker cp builder:/build/${{ matrix.target.artifact }}.tgz .
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.artifact }}
          path: ${{ matrix.target.artifact }}.tgz

  bundle:
    needs: ['build-native', 'build-docker']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: artifacts
      - run: mkdir -p vendor
      - run: mv artifacts/*/*.tgz vendor/
      - run: npm pack .
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: datadog-native-appsec-*.tgz
      - uses: actions/upload-artifact@v2
        with:
          name: vendor
          path: vendor

  tests-release-native:
    needs: ['bundle']
    strategy:
      matrix:
        target:
          - name: macos
            os: macos-latest
            artifact: darwin-x64-unknown
          - name: windows 64 bits # - TODO: windows support when we have a static lib
            os: windows-2016
            artifact: win32-x64-unknown
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - uses: actions/download-artifact@v2
        with:
          name: release
      - run: node scripts/rename.js
      - run: npm i -S datadog-native-appsec-0.0.0.tgz
      - run: npm t

  tests-release-docker:
    needs: ['bundle']
    strategy:
      matrix:
        target:
          - node:14
          - node:14-alpine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: release
      - run: docker build -t test -f ./docker/test.Dockerfile --build-arg BASE_IMAGE=${{ matrix.target }} .
      - run: docker run test

  all-good:
    needs: [ tests-release-native,  tests-release-native, lint, licenses]
    runs-on: ubuntu-latest
    steps:
      - run: echo 'ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€'
